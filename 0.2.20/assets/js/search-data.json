{"0": {
    "doc": "Add Devices",
    "title": "Add Devices",
    "content": ". Add a device through the Web UI by clicking the “Add Device” button under /devices or /users. Once the device profile is created, you can send the WireGuard configuration file to the user by: . | Shareable Link: Generates a time limited link to the device config file that can be sent to the user. | Download Config: Downloads the device config file to your local machine to be sent securely to the user. | . Devices are associated with users. See Add Users for more information on how to add a user. Related: Client Instructions . ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/add-devices/",
    "relUrl": "/docs/user-guides/add-devices/"
  },"1": {
    "doc": "Add Users",
    "title": "Web UI",
    "content": "Add a user by clicking the “Add User” button under /users. You will be asked to specify an email and a password for the user. These credentials will be used to authenticate the user so they are able to establish the connection. Next: Add Devices . ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/add-users/#web-ui",
    "relUrl": "/docs/user-guides/add-users/#web-ui"
  },"2": {
    "doc": "Add Users",
    "title": "Add Users",
    "content": ". Once you have successfully installed Firezone you’ll need to add users to grant them access to your network. This is done through the Web UI. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/add-users/",
    "relUrl": "/docs/user-guides/add-users/"
  },"3": {
    "doc": "Authentication",
    "title": "Web Authentication (default)",
    "content": "Firezone will use the user’s email address and password to authenticate their VPN session. You can set the session length to a minimum of 1 hour and maximum of 90 days. Setting this to Never disables this setting, allowing VPN sessions indefinitely. This is the default. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/authentication/#web-authentication-default",
    "relUrl": "/docs/user-guides/authentication/#web-authentication-default"
  },"4": {
    "doc": "Authentication",
    "title": "Single Sign On (coming soon)",
    "content": "Single Sign-On is currently under development! Contact us to share your requirements and be notified when it’s available. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/authentication/#single-sign-on-coming-soon",
    "relUrl": "/docs/user-guides/authentication/#single-sign-on-coming-soon"
  },"5": {
    "doc": "Authentication",
    "title": "Authentication",
    "content": ". Firezone provides the ability to require authentication to establish VPN connections. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/authentication/",
    "relUrl": "/docs/user-guides/authentication/"
  },"6": {
    "doc": "Client Instructions",
    "title": "Step 1 - Install the native WireGuard client",
    "content": "Firezone is compatible with the official WireGuard clients found here: . | MacOS | Windows | iOS | Android | . For operating systems not listed above see the Official WireGuard site: https://www.wireguard.com/install/. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/client-instructions/#step-1---install-the-native-wireguard-client",
    "relUrl": "/docs/user-guides/client-instructions/#step-1---install-the-native-wireguard-client"
  },"7": {
    "doc": "Client Instructions",
    "title": "Step 2 - Download the connection config file",
    "content": "This will end in .conf and be sent to you by the Firezone administrator. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/client-instructions/#step-2---download-the-connection-config-file",
    "relUrl": "/docs/user-guides/client-instructions/#step-2---download-the-connection-config-file"
  },"8": {
    "doc": "Client Instructions",
    "title": "Step 3 - Add the config to the client",
    "content": "Open the WireGuard client and import the .conf file. Turn on the VPN connection by toggling the Activate switch. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/client-instructions/#step-3---add-the-config-to-the-client",
    "relUrl": "/docs/user-guides/client-instructions/#step-3---add-the-config-to-the-client"
  },"9": {
    "doc": "Client Instructions",
    "title": "Client Instructions",
    "content": ". This is written for the end user who will be connecting to the Firezone VPN server. Follow this guide to establish a connection to the VPN server through the WireGuard native client. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/client-instructions/",
    "relUrl": "/docs/user-guides/client-instructions/"
  },"10": {
    "doc": "Client Setup",
    "title": "Client Setup",
    "content": ". Once successfully deployed, users and devices can be added to connect to the VPN server: . | Add Users: Add users to grant them access to your network. | Client Instructions: Send these instructions to the user attempting to establish a connection. | . See User Guides for additional information on common tasks. Previous: Install Server Related: Troubleshooting . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/clients/",
    "relUrl": "/docs/deploy/clients/"
  },"11": {
    "doc": "Configuration File",
    "title": "Configuration File",
    "content": ". Shown below is a complete listing of the configuration options available in /etc/firezone/firezone.rb. | option | description | default value | . | default['firezone']['fqdn'] | FQDN of this Firezone instance. | (node['fqdn'] || node['hostname']).downcase | . | default['firezone']['config_directory'] | Top-level directory for Firezone configuration. | '/etc/firezone' | . | default['firezone']['install_directory'] | Top-level directory to install Firezone to. | '/opt/firezone' | . | default['firezone']['app_directory'] | Top-level directory to install the Firezone web application. | \"#{node['firezone']['install_directory']}/embedded/service/firezone\" | . | default['firezone']['log_directory'] | Top-level directory for Firezone logs. | '/var/log/firezone' | . | default['firezone']['var_directory'] | Top-level directory for Firezone runtime files. | '/var/opt/firezone' | . | default['firezone']['user'] | Name of unprivileged Linux user most services and files will belong to. | 'firezone' | . | default['firezone']['group'] | Name of Linux group most services and files will belong to. | 'firezone' | . | default['firezone']['admin_email'] | Email address for initial Firezone user. | \"firezone@localhost\" | . | default['firezone']['egress_interface'] | Interface name where tunneled traffic will exit. If nil, the default route interface will be used. | nil | . | default['firezone']['fips_enabled'] | Enable or disable OpenSSL FIPs mode. | nil | . | default['firezone']['logging']['enabled'] | Enable or disable logging across Firezone. Set to false to disable logging entirely. | true | . | default['enterprise']['name'] | Name used by the Chef ‘enterprise’ cookbook. | 'firezone' | . | default['firezone']['install_path'] | Install path used by Chef ‘enterprise’ cookbook. Should be set to the same as the install_directory above. | node['firezone']['install_directory'] | . | default['firezone']['sysvinit_id'] | An identifier used in /etc/inittab. Must be a unique sequence of 1-4 characters. | 'SUP' | . | default['firezone']['nginx']['enabled'] | Enable or disable the bundled nginx server. | true | . | default['firezone']['nginx']['force_ssl'] | Force nginx to SSL mode only. | true | . | default['firezone']['nginx']['non_ssl_port'] | HTTP listen port. | 80 | . | default['firezone']['nginx']['ssl_port'] | HTTPS listen port. | 443 | . | default['firezone']['nginx']['directory'] | Directory to store Firezone-related nginx virtual host configuration. | \"#{node['firezone']['var_directory']}/nginx/etc\" | . | default['firezone']['nginx']['log_directory'] | Directory to store Firezone-related nginx log files. | \"#{node['firezone']['log_directory']}/nginx\" | . | default['firezone']['nginx']['log_rotation']['file_maxbytes'] | File size at which to rotate Nginx log files. | 104857600 | . | default['firezone']['nginx']['log_rotation']['num_to_keep'] | Number of Firezone nginx log files to keep before discarding. | 10 | . | default['firezone']['nginx']['log_x_forwarded_for'] | Whether to log Firezone nginx x-forwarded-for header. | false | . | default['firezone']['nginx']['redirect_to_canonical'] | Whether to redirect URLs to the canonical FQDN specified above | false | . | default['firezone']['nginx']['cache']['enabled'] | Enable or disable the Firezone nginx cache. | false | . | default['firezone']['nginx']['cache']['directory'] | Directory for Firezone nginx cache. | \"#{node['firezone']['var_directory']}/nginx/cache\" | . | default['firezone']['nginx']['user'] | Firezone nginx user. | node['firezone']['user'] | . | default['firezone']['nginx']['group'] | Firezone nginx group. | node['firezone']['group'] | . | default['firezone']['nginx']['dir'] | Top-level nginx configuration directory. | node['firezone']['nginx']['directory'] | . | default['firezone']['nginx']['log_dir'] | Top-level nginx log directory. | node['firezone']['nginx']['log_directory'] | . | default['firezone']['nginx']['pid'] | Location for nginx pid file. | \"#{node['firezone']['nginx']['directory']}/nginx.pid\" | . | default['firezone']['nginx']['daemon_disable'] | Disable nginx daemon mode so we can monitor it instead. | true | . | default['firezone']['nginx']['gzip'] | Turn nginx gzip compression on or off. | 'on' | . | default['firezone']['nginx']['gzip_static'] | Turn nginx gzip compression on or off for static files. | 'off' | . | default['firezone']['nginx']['gzip_http_version'] | HTTP version to use for serving static files. | '1.0' | . | default['firezone']['nginx']['gzip_comp_level'] | nginx gzip compression level. | '2' | . | default['firezone']['nginx']['gzip_proxied'] | Enables or disables gzipping of responses for proxied requests depending on the request and response. | 'any' | . | default['firezone']['nginx']['gzip_vary'] | Enables or disables inserting the “Vary: Accept-Encoding” response header. | 'off' | . | default['firezone']['nginx']['gzip_buffers'] | Sets the number and size of buffers used to compress a response. If nil, nginx default is used. | nil | . | default['firezone']['nginx']['gzip_types'] | MIME types to enable gzip compression for. | ['text/plain', 'text/css','application/x-javascript', 'text/xml', 'application/xml', 'application/rss+xml', 'application/atom+xml', 'text/javascript', 'application/javascript', 'application/json'] | . | default['firezone']['nginx']['gzip_min_length'] | Minimum file length to enable file gzip compression for. | 1000 | . | default['firezone']['nginx']['gzip_disable'] | User-agent matcher to disable gzip compression for. | 'MSIE [1-6]\\.' | . | default['firezone']['nginx']['keepalive'] | Activates cache for connection to upstream servers. | 'on' | . | default['firezone']['nginx']['keepalive_timeout'] | Timeout in seconds for keepalive connection to upstream servers. | 65 | . | default['firezone']['nginx']['worker_processes'] | Number of nginx worker processes. | node['cpu'] &amp;&amp; node['cpu']['total'] ? node['cpu']['total'] : 1 | . | default['firezone']['nginx']['worker_connections'] | Max number of simultaneous connections that can be opened by a worker process. | 1024 | . | default['firezone']['nginx']['worker_rlimit_nofile'] | Changes the limit on the maximum number of open files for worker processes. Uses nginx default if nil. | nil | . | default['firezone']['nginx']['multi_accept'] | Whether workers should accept one connection at a time or multiple. | false | . | default['firezone']['nginx']['event'] | Specifies the connection processing method to use inside nginx events context. | nil | . | default['firezone']['nginx']['server_tokens'] | Enables or disables emitting nginx version on error pages and in the “Server” response header field. | nil | . | default['firezone']['nginx']['server_names_hash_bucket_size'] | Sets the bucket size for the server names hash tables. | 64 | . | default['firezone']['nginx']['sendfile'] | Enables or disables the use of nginx’s sendfile(). | 'on' | . | default['firezone']['nginx']['access_log_options'] | Sets nginx access log options. | nil | . | default['firezone']['nginx']['error_log_options'] | Sets nginx error log options. | nil | . | default['firezone']['nginx']['disable_access_log'] | Disables nginx access log. | false | . | default['firezone']['nginx']['default_site_enabled'] | Enables nginx default site. | false | . | default['firezone']['nginx']['types_hash_max_size'] | nginx types hash max size. | 2048 | . | default['firezone']['nginx']['types_hash_bucket_size'] | nginx types hash bucket size. | 64 | . | default['firezone']['nginx']['proxy_read_timeout'] | nginx proxy read timeout. Set to nil to use nginx default. | nil | . | default['firezone']['nginx']['client_body_buffer_size'] | nginx client body buffer size. Set to nil to use nginx default. | nil | . | default['firezone']['nginx']['client_max_body_size'] | nginx client max body size. | '250m' | . | default['firezone']['nginx']['default']['modules'] | Specify additional nginx modules. | [] | . | default['firezone']['postgresql']['enabled'] | Enable or disable bundled Postgresql. Set to false and fill in the database options below to use your own Postgresql instance. | true | . | default['firezone']['postgresql']['username'] | Username for Postgresql. | node['firezone']['user'] | . | default['firezone']['postgresql']['data_directory'] | Postgresql data directory. | \"#{node['firezone']['var_directory']}/postgresql/13.3/data\" | . | default['firezone']['postgresql']['log_directory'] | Postgresql log directory. | \"#{node['firezone']['log_directory']}/postgresql\" | . | default['firezone']['postgresql']['log_rotation']['file_maxbytes'] | Postgresql log file maximum size before it’s rotated. | 104857600 | . | default['firezone']['postgresql']['log_rotation']['num_to_keep'] | Number of Postgresql log files to keep. | 10 | . | default['firezone']['postgresql']['checkpoint_completion_target'] | Postgresql checkpoint completion target. | 0.5 | . | default['firezone']['postgresql']['checkpoint_segments'] | Number of Postgresql checkpoint segments. | 3 | . | default['firezone']['postgresql']['checkpoint_timeout'] | Postgresql checkpoint timeout. | '5min' | . | default['firezone']['postgresql']['checkpoint_warning'] | Postgresql checkpoint warning time in seconds. | '30s' | . | default['firezone']['postgresql']['effective_cache_size'] | Postgresql effective cache size. | '128MB' | . | default['firezone']['postgresql']['listen_address'] | Postgresql listen address. | '127.0.0.1' | . | default['firezone']['postgresql']['max_connections'] | Postgresql max connections. | 350 | . | default['firezone']['postgresql']['md5_auth_cidr_addresses'] | Postgresql CIDRs to allow for md5 auth. | ['127.0.0.1/32', '::1/128'] | . | default['firezone']['postgresql']['port'] | Postgresql listen port. | 15432 | . | default['firezone']['postgresql']['shared_buffers'] | Postgresql shared buffers size. | \"#{(node['memory']['total'].to_i / 4) / 1024}MB\" | . | default['firezone']['postgresql']['shmmax'] | Postgresql shmmax in bytes. | 17179869184 | . | default['firezone']['postgresql']['shmall'] | Postgresql shmall in bytes. | 4194304 | . | default['firezone']['postgresql']['work_mem'] | Postgresql working memory size. | '8MB' | . | default['firezone']['database']['user'] | Specifies the username Firezone will use to connect to the DB. | node['firezone']['postgresql']['username'] | . | default['firezone']['database']['name'] | Database that Firezone will use. Will be created if it doesn’t exist. | 'firezone' | . | default['firezone']['database']['host'] | Database host that Firezone will connect to. | node['firezone']['postgresql']['listen_address'] | . | default['firezone']['database']['port'] | Database port that Firezone will connect to. | node['firezone']['postgresql']['port'] | . | default['firezone']['database']['pool'] | Database pool size Firezone will use. | [10, Etc.nprocessors].max | . | default['firezone']['database']['ssl'] | Whether to connect to the database over SSL. | false | . | default['firezone']['database']['ssl_opts'] | Hash of options to send to the :ssl_opts option when connecting over SSL. See Ecto.Adapters.Postgres documentation. | {} | . | default['firezone']['database']['parameters'] | Hash of parameters to send to the :parameters option when connecting to the database. See Ecto.Adapters.Postgres documentation. | {} | . | default['firezone']['database']['extensions'] | Database extensions to enable. | { 'plpgsql' =&gt; true, 'pg_trgm' =&gt; true } | . | default['firezone']['phoenix']['enabled'] | Enable or disable the Firezone web application. | true | . | default['firezone']['phoenix']['port'] | Firezone web application listen port. This will be the upstream port that nginx proxies. | 13000 | . | default['firezone']['phoenix']['log_directory'] | Firezone web application log directory. | \"#{node['firezone']['log_directory']}/phoenix\" | . | default['firezone']['phoenix']['log_rotation']['file_maxbytes'] | Firezone web application log file size. | 104857600 | . | default['firezone']['phoenix']['log_rotation']['num_to_keep'] | Number of Firezone web application log files to keep. | 10 | . | default['firezone']['wireguard']['enabled'] | Enable or disable bundled WireGuard management. | true | . | default['firezone']['wireguard']['log_directory'] | Log directory for bundled WireGuard management. | \"#{node['firezone']['log_directory']}/wireguard\" | . | default['firezone']['wireguard']['log_rotation']['file_maxbytes'] | WireGuard log file max size. | 104857600 | . | default['firezone']['wireguard']['log_rotation']['num_to_keep'] | Number of WireGuard log files to keep. | 10 | . | default['firezone']['wireguard']['interface_name'] | WireGuard interface name. | 'wg-firezone' | . | default['firezone']['wireguard']['port'] | WireGuard listen port. | 51820 | . | default['firezone']['wireguard']['mtu'] | WireGuard interface MTU for this server and for device configurations. | 1420 | . | default['firezone']['wireguard']['endpoint'] | WireGuard Endpoint to use for generating device configurations. If nil, defaults to the server’s public IP address. | nil | . | default['firezone']['wireguard']['dns'] | WireGuard DNS to use for generated device configurations. | '1.1.1.1, 1.0.0.1' | . | default['firezone']['wireguard']['allowed_ips'] | WireGuard AllowedIPs to use for generated device configurations. | '0.0.0.0/0, ::/0' | . | default['firezone']['wireguard']['persistent_keepalive'] | Default PersistentKeepalive setting for generated device configurations. A value of 0 disables. | 0 | . | default['firezone']['wireguard']['ipv4']['enabled'] | Enable or disable IPv4 for WireGuard network. | true | . | default['firezone']['wireguard']['ipv4']['network'] | WireGuard network IPv4 address pool. | '10.3.2.0/24' | . | default['firezone']['wireguard']['ipv4']['address'] | WireGuard interface IPv4 address. Must be within WireGuard address pool. | '10.3.2.1' | . | default['firezone']['wireguard']['ipv6']['enabled'] | Enable or disable IPv6 for WireGuard network. | true | . | default['firezone']['wireguard']['ipv6']['network'] | WireGuard network IPv6 address pool. | 'fd00::3:2:0/120' | . | default['firezone']['wireguard']['ipv6']['address'] | WireGuard interface IPv6 address. Must be within IPv6 address pool. | 'fd00::3:2:1' | . | default['firezone']['runit']['svlogd_bin'] | Runit svlogd bin location. | \"#{node['firezone']['install_directory']}/embedded/bin/svlogd\" | . | default['firezone']['ssl']['directory'] | SSL directory for storing generated certs. | '/var/opt/firezone/ssl' | . | default['firezone']['ssl']['enabled'] | Enable or disable SSL for nginx. | true | . | default['firezone']['ssl']['certificate'] | Path to the certificate file for your FQDN. If this is nil, a self-signed on will be generated for you. | nil | . | default['firezone']['ssl']['certificate_key'] | Path to the certificate key file for your FQDN. If this is nil, a self-signed certificate will be generated for you. | nil | . | default['firezone']['ssl']['ssl_dhparam'] | nginx ssl dh_param. | nil | . | default['firezone']['ssl']['country_name'] | Country name for self-signed cert. | 'US' | . | default['firezone']['ssl']['state_name'] | State name for self-signed cert. | 'CA' | . | default['firezone']['ssl']['locality_name'] | Locality name for self-signed cert. | 'San Francisco' | . | default['firezone']['ssl']['company_name'] | Company name self-signed cert. | 'My Company' | . | default['firezone']['ssl']['organizational_unit_name'] | Organizational unit name for self-signed cert. | 'Operations' | . | default['firezone']['ssl']['email_address'] | Email address for self-signed cert. | 'you@example.com' | . | default['firezone']['ssl']['ciphers'] | SSL ciphers for nginx to use. | 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA' | . | default['firezone']['ssl']['fips_ciphers'] | SSL ciphers for FIPs mode. | 'FIPS@STRENGTH:!aNULL:!eNULL' | . | default['firezone']['ssl']['protocols'] | TLS protocols to use. | 'TLSv1 TLSv1.1 TLSv1.2' | . | default['firezone']['ssl']['session_cache'] | SSL session cache. | 'shared:SSL:4m' | . | default['firezone']['ssl']['session_timeout'] | SSL session timeout. | '5m' | . | default['firezone']['robots_allow'] | nginx robots allow. | '/' | . | default['firezone']['robots_disallow'] | nginx robots disallow. | nil | . | default['firezone']['from_email'] | Outbound email from address. | nil | . | default['firezone']['smtp_address'] | Outbound email SMTP server address. | nil | . | default['firezone']['smtp_password'] | Outbound email SMTP password. | nil | . | default['firezone']['smtp_port'] | Outbound email SMTP port. | nil | . | default['firezone']['smtp_user_name'] | Outbound email SMTP username. | nil | . | default['firezone']['telemetry']['enabled'] | Enable or disable anonymized product telemetry. | true | . | default['firezone']['connectivity_checks']['enabled'] | Enable or disable the Firezone connectivity checks service. | true | . | default['firezone']['connectivity_checks']['interval'] | Interval between connectivity checks in seconds. | 3_600 | . ",
    "url": "https://docs.firez.one/0.2.20/docs/reference/configuration-file/",
    "relUrl": "/docs/reference/configuration-file/"
  },"12": {
    "doc": "Configure",
    "title": "Configure",
    "content": ". Firezone leverages Chef Omnibus to handle release packaging, process supervision, log management, and more. The main configuration file is written in Ruby and can be found at /etc/firezone/firezone.rb. Changing this file requires re-running sudo firezone-ctl reconfigure which triggers Chef to pick up the changes and apply them to the running system. For an exhaustive list of configuration variables and their description, see the configuration file reference. ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/configure/",
    "relUrl": "/docs/administer/configure/"
  },"13": {
    "doc": "Firewall Rules",
    "title": "Firewall Rules",
    "content": ". Firezone supports egress filtering controls to explicitly DROP or ACCEPT packets via the kernel’s netfilter system. By default, all traffic is allowed. The Allowlist and Denylist support both IPv4 and IPv6 CIDRs and IP addresses. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/firewall-rules/",
    "relUrl": "/docs/user-guides/firewall-rules/"
  },"14": {
    "doc": "Overview",
    "title": "Quick Start",
    "content": ". | Deploy: A step-by-step walkthrough of setting up Firezone. Start here if you are new. | Administer: This section relates directly to configuring the server instance. | User Guides: Useful guides to help you learn how to use Firezone and troubleshoot common issues. Consult this section after you successfully deploy the Firezone server. | . ",
    "url": "https://docs.firez.one/0.2.20/#quick-start",
    "relUrl": "/#quick-start"
  },"15": {
    "doc": "Overview",
    "title": "Get Help",
    "content": "If you’re looking for help installing, configuring, or using Firezone, we’re happy to help. | Discussion Forums: Ask questions, report bugs, and suggest features. | Public Slack Group: Join live discussions, meet other users, and get to know the contributors. | Email Us: We read every email and respond as soon as we can. | . ",
    "url": "https://docs.firez.one/0.2.20/#get-help",
    "relUrl": "/#get-help"
  },"16": {
    "doc": "Overview",
    "title": "Contribute to Firezone",
    "content": "We deeply appreciate any and all contributions to the project and do our best to ensure your contribution is included. To get started, see CONTRIBUTING.md . ",
    "url": "https://docs.firez.one/0.2.20/#contribute-to-firezone",
    "relUrl": "/#contribute-to-firezone"
  },"17": {
    "doc": "Overview",
    "title": "Overview",
    "content": ". Firezone is an open source, self-hosted VPN server and egress firewall for Linux. Use it to quickly and easily secure access to your private network and internal applications from a simple Web UI. These docs explain how to deploy, configure, and use Firezone. ",
    "url": "https://docs.firez.one/0.2.20/",
    "relUrl": "/"
  },"18": {
    "doc": "Deploy",
    "title": "Deploy",
    "content": ". Firezone can be deployed on most popular Linux distributions in a few minutes. Start by checking if your environment is listed on supported platforms. A kernel upgrade may be required to ensure WireGuard is supported. Start Here: Supported Platforms . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/",
    "relUrl": "/docs/deploy/"
  },"19": {
    "doc": "Administer",
    "title": "Administer",
    "content": " ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/",
    "relUrl": "/docs/administer/"
  },"20": {
    "doc": "User Guides",
    "title": "User Guides",
    "content": " ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/",
    "relUrl": "/docs/user-guides/"
  },"21": {
    "doc": "Reference",
    "title": "Reference",
    "content": " ",
    "url": "https://docs.firez.one/0.2.20/docs/reference/",
    "relUrl": "/docs/reference/"
  },"22": {
    "doc": "Manage Installation",
    "title": "Manage Installation",
    "content": ". Your Firezone installation can be managed via the firezone-ctl command, as shown below. Most subcommands require prefixing with sudo. root@demo:~# firezone-ctl I don't know that command. omnibus-ctl: command (subcommand) General Commands: cleanse Delete *all* firezone data, and start from scratch. create-or-reset-admin Resets the password for admin with email specified by default['firezone']['admin_email'] or creates a new admin if that email doesn't exist. help Print this help message. reconfigure Reconfigure the application. reset-network Resets nftables, WireGuard interface, and routing table back to Firezone defaults. show-config Show the configuration that would be generated by reconfigure. teardown-network Removes WireGuard interface and firezone nftables table. uninstall Kill all processes and uninstall the process supervisor (data will be preserved). version Display current version of Firezone Service Management Commands: graceful-kill Attempt a graceful stop, then SIGKILL the entire process group. hup Send the services a HUP. int Send the services an INT. kill Send the services a KILL. once Start the services if they are down. Do not restart them if they stop. restart Stop the services if they are running, then start them again. service-list List all the services (enabled services appear with a *.) start Start services if they are down, and restart them if they stop. status Show the status of all the services. stop Stop the services, and do not restart them. tail Watch the service logs of all enabled services. term Send the services a TERM. usr1 Send the services a USR1. usr2 Send the services a USR2. ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/manage/",
    "relUrl": "/docs/administer/manage/"
  },"23": {
    "doc": "Prerequisites",
    "title": "Create a DNS record",
    "content": "Firezone requires a fully-qualified domain name (e.g. firezone.company.com) for production use. You’ll need to create the appropriate DNS record at your registrar to achieve this. Typically this is either an A, CNAME, or AAAA record depending on your requirements. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/prerequisites/#create-a-dns-record",
    "relUrl": "/docs/deploy/prerequisites/#create-a-dns-record"
  },"24": {
    "doc": "Prerequisites",
    "title": "Create an SSL certificate",
    "content": "While Firezone generates a self-signed SSL certificate for you on install, you’ll need a valid SSL certificate to use Firezone in a production capacity. We recommend using Let’s Encrypt to generate a free SSL cert for your domain. Firezone will include the ability to automatically generate valid SSL certificates for you in an upcoming release, but for now these must be generated manually and specified in the main configuration file at /etc/firezone/firezone.rb. See here for a guide on how to do so: https://eff-certbot.readthedocs.io/en/stable/using.html#manual . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/prerequisites/#create-an-ssl-certificate",
    "relUrl": "/docs/deploy/prerequisites/#create-an-ssl-certificate"
  },"25": {
    "doc": "Prerequisites",
    "title": "Security Group and Firewall Settings",
    "content": "By default, Firezone requires ports 80/tcp, 443/tcp, and 51820/udp to be open. This can change based on what you’ve configured in the configuration file. See the configuration file reference for details. The image below shows this configuration on an AWS EC2 instance: . Previous: Resource Requirements Next: Install Server . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/prerequisites/#security-group-and-firewall-settings",
    "relUrl": "/docs/deploy/prerequisites/#security-group-and-firewall-settings"
  },"26": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": ". Firezone requires the setup of a DNS record and matching SSL certificate for production deployments. Not using Firezone in production? Skip to install the server. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/prerequisites/",
    "relUrl": "/docs/deploy/prerequisites/"
  },"27": {
    "doc": "Resource Requirements",
    "title": "Resource Requirements",
    "content": ". Firezone uses in-kernel WireGuard, so its performance should be very good. We recommend starting with 1 vCPU and 1 GB of RAM and scaling up as the number of users and bandwidth requirements grow. In general, more CPU cores translate to higher bandwidth capacity per tunnel while more RAM will help with higher counts of users and tunnels. In the vast majority of cases, with WireGuard, your network link speed is going to be the bottleneck before your CPU will. Previous: Supported Platforms Next: Prerequisites . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/resource-requirements/",
    "relUrl": "/docs/deploy/resource-requirements/"
  },"28": {
    "doc": "Security Considerations",
    "title": "Reporting Security Issues",
    "content": "To report any security-related bugs, see our security reporting policy . ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/security-considerations/#reporting-security-issues",
    "relUrl": "/docs/administer/security-considerations/#reporting-security-issues"
  },"29": {
    "doc": "Security Considerations",
    "title": "Security Considerations",
    "content": ". Shown below is a table of ports used by Firezone services. | Service | Default port | Listen address | Description | . | Nginx | 80 443 | all | Public HTTP(S) port for administering Firezone and facilitating authentication. | . | WireGuard | 51820 | all | Public WireGuard port used for VPN connections. | . | Postgresql | 15432 | 127.0.0.1 | Local-only port used for bundled Postgresql server | . | Phoenix | 13000 | 127.0.0.1 | Local-only port used by upstream elixir app server. | . ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/security-considerations/",
    "relUrl": "/docs/administer/security-considerations/"
  },"30": {
    "doc": "Install Server",
    "title": "Installation Instructions",
    "content": "NOTE: Firezone modifies the kernel netfilter and routing tables. Other programs that modify the Linux routing table or netfilter firewall will likely interfere with Firezone’s operation. Assuming you’re running a supported Linux kernel on one of the distros listed above, follow these steps to install and configure Firezone for first use: . | Install WireGuard for your distro. If using Linux kernel 5.6 or higher, skip this step. | Download the relevant package for your distribution from the releases page. | Install with sudo rpm -i firezone*.rpm or sudo dpkg -i firezone*.deb depending on your distro. | Bootstrap the application with sudo firezone-ctl reconfigure. This will initialize config files, set up needed services and generate the default configuration. | Edit the default configuration located at /etc/firezone/firezone.rb. At a minimum, you’ll need to review the following configuration variables: . # Auto-generated based on the server's hostname. # Set this to the FQDN used to access the Web UI. default['firezone']['fqdn'] = 'firezone.example.com' # Specify the path to your SSL cert and private key. # If set to nil, a self-signed cert will be generated for you. default['firezone']['ssl']['certificate'] = '/path/to/cert.pem' default['firezone']['ssl']['certificate_key'] = '/path/to/key.pem' . | Reconfigure the application to pick up the new changes: sudo firezone-ctl reconfigure. | Finally, create an admin user with sudo firezone-ctl create-or-reset-admin. The login credentials will be printed to the console output. | Now you should be able to log into the web UI at the FQDN you specified in step 5 above, e.g. https://firezone.example.com | . Find solutions to common issues during deployment in Troubleshoot. Previous: Prerequisites Next: Client Setup . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/server/#installation-instructions",
    "relUrl": "/docs/deploy/server/#installation-instructions"
  },"31": {
    "doc": "Install Server",
    "title": "Install Server",
    "content": ". Important: Ensure you’ve satisfied the prerequisites before following this guide. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/server/",
    "relUrl": "/docs/deploy/server/"
  },"32": {
    "doc": "Split Tunnel",
    "title": "Step 1 - Configure Allowed IPs",
    "content": "The Allowed IPs field found on the /settings/default page determines the IP ranges for which the client will route network traffic. Modifications to this field will apply only to new WireGuard tunnel configurations generated by Firezone. The default value is 0.0.0.0/0, ::/0, which routes all network traffic from the client to the VPN server. Some examples of values in this field are: . | 0.0.0.0/0, ::/0 - all network traffic will be routed to the VPN server. | 192.0.2.3/32 - only traffic to a single IP address will be routed to the VPN server. | 3.5.140.0/22 - only traffic to IPs in the 3.5.140.1 - 3.5.143.254 range will be routed to the VPN server. In this example, the CIDR range for the ap-northeast-2 AWS region was used. | . Note: When deciding where to route a packet, Firezone chooses the egress interface corresponding to the most specific route first. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/split-tunnel/#step-1---configure-allowed-ips",
    "relUrl": "/docs/user-guides/split-tunnel/#step-1---configure-allowed-ips"
  },"33": {
    "doc": "Split Tunnel",
    "title": "Step 2 - Regenerate WireGuard tunnel configurations",
    "content": "To update existing WireGuard tunnels with the new split tunnel configuration, users will need to regenerate the configuration files and add them to their native WireGuard client. See, add device for instructions. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/split-tunnel/#step-2---regenerate-wireguard-tunnel-configurations",
    "relUrl": "/docs/user-guides/split-tunnel/#step-2---regenerate-wireguard-tunnel-configurations"
  },"34": {
    "doc": "Split Tunnel",
    "title": "Split Tunnel",
    "content": ". This guide will describe the steps required to enable split tunneling with WireGuard using Firezone so only traffic to defined IP ranges will be routed through the VPN server. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/split-tunnel/",
    "relUrl": "/docs/user-guides/split-tunnel/"
  },"35": {
    "doc": "Supported Platforms",
    "title": "AmazonLinux 2 Notes",
    "content": "Kernel upgrade required: . sudo amazon-linux-extras install -y kernel-5.10 . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#amazonlinux-2-notes",
    "relUrl": "/docs/deploy/supported-platforms/#amazonlinux-2-notes"
  },"36": {
    "doc": "Supported Platforms",
    "title": "CentOS 7 Notes",
    "content": "Kernel upgrade to 5.6+ required. To upgrade to the latest mainline kernel and select it as the default boot kernel: . sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org sudo yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm sudo yum install -y elrepo-release sudo yum --enablerepo=elrepo-kernel install -y kernel-ml sudo grub2-set-default 0 sudo grub2-mkconfig -o /boot/grub2/grub.cfg sudo reboot . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#centos-7-notes",
    "relUrl": "/docs/deploy/supported-platforms/#centos-7-notes"
  },"37": {
    "doc": "Supported Platforms",
    "title": "CentOS 8 Notes",
    "content": "The WireGuard kernel module needs to be installed: . yum install elrepo-release epel-release yum install kmod-wireguard . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#centos-8-notes",
    "relUrl": "/docs/deploy/supported-platforms/#centos-8-notes"
  },"38": {
    "doc": "Supported Platforms",
    "title": "RHEL 7 Notes",
    "content": "Red Hat Enterprise Linux is binary compatible with CentOS, so the Firezone package for CentOS 7 should work just fine for RHEL 7. You’ll still need to upgrade your kernel to 5.6+ however. To do so, follow the steps for CentOS 7 Notes above. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#rhel-7-notes",
    "relUrl": "/docs/deploy/supported-platforms/#rhel-7-notes"
  },"39": {
    "doc": "Supported Platforms",
    "title": "RHEL 8 Notes",
    "content": "Red Hat Enterprise Linux is binary compatible with CentOS, so the Firezone package for CentOS 8 should work just fine for RHEL 8. You’ll still need to install the WireGuard kernel module, however. See CentOS 8 Notes above. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#rhel-8-notes",
    "relUrl": "/docs/deploy/supported-platforms/#rhel-8-notes"
  },"40": {
    "doc": "Supported Platforms",
    "title": "RHEL 9 Notes",
    "content": "Use the package for CentOS 9. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#rhel-9-notes",
    "relUrl": "/docs/deploy/supported-platforms/#rhel-9-notes"
  },"41": {
    "doc": "Supported Platforms",
    "title": "Ubuntu 18.04 Notes",
    "content": "Kernel upgrade to 5.4+ required: . sudo apt install linux-image-generic-hwe-18.04 . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#ubuntu-1804-notes",
    "relUrl": "/docs/deploy/supported-platforms/#ubuntu-1804-notes"
  },"42": {
    "doc": "Supported Platforms",
    "title": "Debian 10 Notes",
    "content": "Kernel upgrade to 5.6+ required. See this guide for an example. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#debian-10-notes",
    "relUrl": "/docs/deploy/supported-platforms/#debian-10-notes"
  },"43": {
    "doc": "Supported Platforms",
    "title": "openSUSE Notes",
    "content": "Firezone requires the setcap utility, but some recent openSUSE releases may not have it installed by default. To fix, ensure libcap-progs is installed: . sudo zypper install libcap-progs . Next: Resource Requirements . ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/#opensuse-notes",
    "relUrl": "/docs/deploy/supported-platforms/#opensuse-notes"
  },"44": {
    "doc": "Supported Platforms",
    "title": "Supported Platforms",
    "content": ". Firezone currently supports the following platforms: . | OS | Architectures | Status | Notes | . | AmazonLinux 2 | amd64 arm64 | Fully-supported | See AmazonLinux 2 Notes | . | CentOS 7 | amd64 | Fully-supported | See CentOS 7 Notes | . | CentOS 8 | amd64 arm64 | Fully-supported | See CentOS 8 Notes | . | CentOS Stream 9 | amd64 arm64 | Fully-supported | Works as-is | . | Red Hat Enterprise Linux 7 | amd64 | Fully-supported | See RHEL 7 Notes | . | Red Hat Enterprise Linux 8 | amd64 arm64 | Fully-supported | See RHEL 8 Notes | . | Red Hat Enterprise Linux 9 | amd64 arm64 | Fully-supported | See RHEL 9 Notes | . | Debian 10 | amd64 arm64 | Fully-supported | See Debian 10 Notes | . | Debian 11 | amd64 arm64 | Fully-supported | Works as-is | . | Fedora 33 | amd64 arm64 | Fully-supported | Works as-is | . | Fedora 34 | amd64 arm64 | Fully-supported | Works as-is | . | Fedora 35 | amd64 arm64 | Fully-supported | Works as-is | . | Ubuntu 18.04 | amd64 arm64 | Fully-supported | See Ubuntu 18.04 Notes | . | Ubuntu 20.04 | amd64 arm64 | Fully-supported | Works as-is | . | openSUSE Leap 15.3 | amd64 | Fully-supported | See openSUSE Notes | . If your distro isn’t listed here please try using a package for the closest distro first. For example, since Raspberry Pi OS is based on Debian, try using the Debian Firezone package. If that doesn’t work, please open an issue and let us know. New distros are being supported on a regular basis and there’s a good chance yours will be added soon. Note that we only support RPM and DEB based packaging systems. Others, like Arch Linux are currently being investigated in this issue. ",
    "url": "https://docs.firez.one/0.2.20/docs/deploy/supported-platforms/",
    "relUrl": "/docs/deploy/supported-platforms/"
  },"45": {
    "doc": "Troubleshoot",
    "title": "Debugging Connectivity Issues",
    "content": "Most connectivity issues with Firezone are caused by other iptables or nftables rules which interfere with Firezone’s operation. If you’re experiencing connectivity issues, check to ensure the iptables ruleset is empty: . root@demo:~# iptables -L Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination . Firezone ships with an embedded nft utility at /opt/firezone/embedded/sbin/nft that can be used to view and debug the kernel’s nftables ruleset. On a fresh Firezone installation, your nftables ruleset should look something like this: . root@demo:~# /opt/firezone/embedded/sbin/nft list ruleset table inet firezone { chain forward { type filter hook forward priority filter; policy accept; } chain postrouting { type nat hook postrouting priority srcnat; policy accept; oifname \"enp1s0\" masquerade random,persistent oifname \"enp6s0\" masquerade random,persistent } } . ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/troubleshoot/#debugging-connectivity-issues",
    "relUrl": "/docs/administer/troubleshoot/#debugging-connectivity-issues"
  },"46": {
    "doc": "Troubleshoot",
    "title": "Need additional help?",
    "content": "If you’re looking for help installing, configuring, or using Firezone, we’re happy to help. | Discussion Forums: ask questions, report bugs, and suggest features | Public Slack Group: join discussions, meet other users, and meet the contributors | Email Us: we’re always happy to chat | . ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/troubleshoot/#need-additional-help",
    "relUrl": "/docs/administer/troubleshoot/#need-additional-help"
  },"47": {
    "doc": "Troubleshoot",
    "title": "Troubleshoot",
    "content": ". For any problems that arise, a good first bet is to check the Firezone logs. To view Firezone logs, run sudo firezone-ctl tail. ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/troubleshoot/",
    "relUrl": "/docs/administer/troubleshoot/"
  },"48": {
    "doc": "Uninstall",
    "title": "Uninstall",
    "content": ". To completely remove Firezone and its configuration files, run the uninstall.sh script: . sudo /bin/bash -c \"$(curl -fsSL https://github.com/firezone/firezone/raw/master/scripts/uninstall.sh)\" . Warning: This will irreversibly destroy ALL Firezone data and can’t be undone. ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/uninstall/",
    "relUrl": "/docs/administer/uninstall/"
  },"49": {
    "doc": "Upgrade",
    "title": "Upgrading from 0.1.x to 0.2.x",
    "content": "Firezone 0.2.x contains some configuration file changes that will need to be handled manually if you’re upgrading from 0.1.x. Run the commands below as root to perform the needed changes to your /etc/firezone/firezone.rb file. cp /etc/firezone/firezone.rb /etc/firezone/firezone.rb.bak sed -i \"s/\\['enable'\\]/\\['enabled'\\]/\" /etc/firezone/firezone.rb echo \"default['firezone']['connectivity_checks']['enabled'] = true\" &gt;&gt; /etc/firezone/firezone.rb echo \"default['firezone']['connectivity_checks']['interval'] = 3_600\" &gt;&gt; /etc/firezone/firezone.rb firezone-ctl reconfigure firezone-ctl restart . ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/upgrade/#upgrading-from-01x-to-02x",
    "relUrl": "/docs/administer/upgrade/#upgrading-from-01x-to-02x"
  },"50": {
    "doc": "Upgrade",
    "title": "Upgrade",
    "content": ". Upgrading Firezone will disconnect all VPN connections and require shutting down the Web UI. We recommend a maintenance window of about an hour in case anything goes wrong during the upgrade. We’re actively working on making this process more automatic in the future, but for now, this is the procedure for upgrading your Firezone instance. To upgrade Firezone, follow these steps: . | Download the new release for your platform. | Install the new package over the old one: sudo dpkg -i firezone_X.X.X.deb or sudo rpm -i --force firezone_X.X.X.rpm depending on your distribution. | Run firezone-ctl reconfigure to pick up the new changes. | Run firezone-ctl restart to restart services. | . Occasionally problems arise. If you hit any, please let us know by filing an issue. ",
    "url": "https://docs.firez.one/0.2.20/docs/administer/upgrade/",
    "relUrl": "/docs/administer/upgrade/"
  },"51": {
    "doc": "IP Whitelisting via VPN",
    "title": "AWS Example",
    "content": "In this example, a Firezone instance has already been set up on a tc2.micro EC2 instance. See the Deployment Guide for details on deploying Firezone. Step 1 - Set a static IP for the Firezone instance . Create and associate an Elastic IP with the Firezone instance. In this case the IP is 52.202.88.54. Step 2 - Restrict access to the protected resource . In this example, the protected resource is a self-hosted web app. Access to the web app is restricted to only requests from 52.202.88.54. Depending on the resource, inbound traffic on different ports and traffic types may need to be allowed. This is outside the scope of this guide. If the protected resource is controlled by a 3rd party, please inform the 3rd party to allow traffic from the static IP set in Step 1 (in this case 52.202.88.54). Step 3 - Route traffic to the protected resource through the VPN server . By default all traffic from users will be routed through the VPN server, and will originate from the static IP set in Step 1 (in this case 52.202.88.54). However, if split tunneling has been enabled, configuration may be required to ensure the destination IP of the protected resource is included in the Allowed IPs. Related: Authentication . ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/whitelist-vpn/#aws-example",
    "relUrl": "/docs/user-guides/whitelist-vpn/#aws-example"
  },"52": {
    "doc": "IP Whitelisting via VPN",
    "title": "IP Whitelisting via VPN",
    "content": ". This guide will walk through a simple example restricting access for a self-hosted web app to a single whitelisted static IP running Firezone. In this example the protected resource and Firezone are in separate VPC regions. This arrangement is commonly done in place of maintaining a whitelist for multiple end users, which may become labor intensive to manage as the access list grows. ",
    "url": "https://docs.firez.one/0.2.20/docs/user-guides/whitelist-vpn/",
    "relUrl": "/docs/user-guides/whitelist-vpn/"
  }
}
